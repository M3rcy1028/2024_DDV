<!DOCTYPE html>
<html>

<head>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src="/javascripts/jquery-3.7.1.min.js"></script>


    <!-- 알림창 UI -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- 상단바 css -->
    <link rel='stylesheet' href='/stylesheets/nav.css' />

    <!-- Bootstrap CSS -->
    <link rel='stylesheet' href='/vendors/bootstrap/css/bootstrap.min.css' />
    <link rel='stylesheet' href='/vendors/bootstrap/css/bootstrap-grid.min.css' />
    <link rel='stylesheet' href='/vendors/bootstrap/css/bootstrap-reboot.min.css' />

    <!-- Bootstrap Icon -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
    <title>
        <%= title %>
    </title>

    <style>
        h2 {
            margin-bottom: 20px;
        }

        body {
            background-color: #f4f7f6;
            margin-top: 20px;
            height: 100%;
        }

        .input-group .input-group-text {
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .input-group .form-control {
            height: auto;
            /* 높이를 자동으로 설정 */
        }

        .card {
            background: #fff;
            transition: .5s;
            border: 0;
            margin-bottom: 30px;
            border-radius: .55rem;
            position: relative;
            width: 100%;
            box-shadow: 0 1px 2px 0 rgb(0 0 0 / 10%);
        }

        .chat-app .people-list {
            width: 280px;
            position: absolute;
            left: 0;
            top: 0;
            padding: 20px;
            z-index: 7
        }

        .chat-app .chat {
            margin-left: 280px;
            border-left: 1px solid #eaeaea
        }

        .people-list {
            margin-top: 20px;
            -moz-transition: .5s;
            -o-transition: .5s;
            -webkit-transition: .5s;
            transition: .5s;
            height: 590px;
            overflow-y: auto;
        }

        .people-list::-webkit-scrollbar {
            display: none;
        }

        .people-list .chat-list li {
            padding: 10px 15px;
            list-style: none;
            border-radius: 3px
        }

        .people-list .chat-list li:hover {
            background: #efefef;
            cursor: pointer
        }

        .people-list .chat-list li.active {
            background: #efefef
        }

        .people-list .chat-list li .name {
            font-size: 15px
        }

        .people-list .chat-list img {
            width: 45px;
            height: 45px;
            border-radius: 50%
        }

        .people-list img {
            float: left;
            border-radius: 50%
        }

        .people-list .about {
            float: left;
            padding-left: 8px
        }

        .people-list .status {
            color: #999;
            font-size: 13px
        }

        .chat .chat-header {
            padding: 15px 20px;
            border-bottom: 2px solid #f4f7f6
        }

        .chat .chat-header img {
            float: left;
            border-radius: 40px;
            width: 40px
        }

        .chat .chat-header .chat-about {
            float: left;
            padding-left: 10px
        }

        .chat .chat-history {
            padding: 20px;
            border-bottom: 2px solid #fff;
            height: 520px;
            overflow-y: auto;
            -ms-overflow-style: none;
        }

        .chat .chat-history::-webkit-scrollbar {
            display: none;
        }

        .chat .chat-history ul {
            padding: 0
        }

        .chat .chat-history ul li {
            list-style: none;
            margin-bottom: 30px
        }

        .chat .chat-history ul li:last-child {
            margin-bottom: 0px
        }

        .chat .chat-history .message-data {
            margin-bottom: 15px
        }

        .chat .chat-history .message-data img {
            border-radius: 40px;
            width: 40px
        }

        .chat .chat-history .message-data-time {
            color: #434651;
            padding-left: 6px
        }

        .chat .chat-history .message {
            color: #444;
            padding: 18px 20px;
            line-height: 26px;
            font-size: 16px;
            border-radius: 7px;
            display: inline-block;
            position: relative
        }

        /* .chat .chat-history .message:after {
            bottom: 100%;
            left: 10px;
            border: solid transparent;
            content: " ";
            height: 0;
            width: 0;
            position: absolute;
            pointer-events: none;
            border-bottom-color: #fff;
            border-width: 10px;
            margin-left: -10px
        } */

        .chat .chat-history .other-message {
            background: #efefef
        }

        /* .chat .chat-history .my-message:after {
            bottom: 100%;
            left: 30px;
            border: solid transparent;
            content: " ";
            height: 0;
            width: 0;
            position: absolute;
            pointer-events: none;
            border-bottom-color: #efefef;
            border-width: 10px;
            margin-left: -10px
        } */

        .chat .chat-history .my-message {
            background: #e8f1f3;
            text-align: right
        }

        /* .chat .chat-history .other-message:after {
            border-bottom-color: #e8f1f3;
            right: 30px
        } */

        .chat .chat-message {
            flex: 1 0 auto;
            padding: 20px
        }

        .online,
        .offline,
        .me {
            margin-right: 2px;
            font-size: 8px;
            vertical-align: middle
        }

        .online {
            color: #86c541
        }

        .offline {
            color: #e47297
        }

        .me {
            color: #1d8ecd
        }

        .float-right {
            float: right
        }

        .clearfix:after {
            visibility: hidden;
            display: block;
            font-size: 0;
            content: " ";
            clear: both;
            height: 0
        }
    </style>

    <script src="/socket.io/socket.io.js"></script>

</head>

<body>
    <%- include('nav.ejs') %>
        <div class="container">
            <div class="row clearfix">
                <div class="col-lg-12">
                    <div class="card chat-app">
                        <div id="plist" class="people-list">
                            <ul id="chat-list" class="list-unstyled chat-list mt-2 mb-0">

                            </ul>
                        </div>
                        <div class="chat">
                            <div class="chat-header clearfix">
                            </div>
                            <div class="chat-history">
                                <ul id="messages" class="m-b-0">

                                </ul>
                            </div>
                            <div class="chat-message clearfix">
                                <div class="input-group mb-0">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text"><i class="fa fa-send"></i></span>
                                    </div>
                                    <input id="input" type="text" class="form-control" autocomplete="off" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


</body>

<script>
    const socket = io({
        auth: {
            usrid: '<%= usrid %>'
        }
    });
    var cnum;
    var c_sid;

    var inputField = document.getElementById('input');

    // 채팅 입력 시 서버에 메시지 내용과 메타데이터 전송
    function sendMessage() {
        if (inputField.value) {
            socket.emit('chat_message', {
                message: inputField.value,
                cnum: cnum,
                sender: '<%= usrid %>', // 쿠키에서 보내는 사람
            });
            inputField.value = '';
        }
    }

    inputField.addEventListener('keydown', (event) => {
        // Enter 키만 메시지를 전송하도록 제한
        if (event.key === 'Enter') {
            sendMessage();
        }
    });

    // 구매 버튼 클릭 시 서버에 구매 명령 전송
    function purchase() {
        // 구매 재확인 메시지 표시
        Swal.fire({
            title: '정말 구매하시겠습니까?',
            icon: 'warning',

            showCancelButton: true, // cancel버튼 보이기. 기본은 원래 없음
            confirmButtonColor: '#3085d6', // confrim 버튼 색깔 지정
            cancelButtonColor: '#d33', // cancel 버튼 색깔 지정
            confirmButtonText: '승인', // confirm 버튼 텍스트 지정
            cancelButtonText: '취소', // cancel 버튼 텍스트 지정

            reverseButtons: false, // 버튼 순서 거꾸로

        }).then(result => {
            // 만약 Promise리턴을 받으면,
            if (result.isConfirmed) { // 만약 모달창에서 confirm 버튼을 눌렀다면

                // 구매 확인 시 서버에 구매 명령 전송
                socket.emit('purchase', cnum);
            }
        });
    }

    // 채팅방 클릭 시 서버에 채팅 기록 요청
    function load_chat_log(btn) {
        console.log("load chatroom", btn.id)
        socket.emit('load_chatlog', (btn.id))
        cnum = btn.id;
    }

    // 단일 채팅 쓰기
    socket.on('chat_message', (chat) => {
        const item = document.createElement('li');
        item.classList.add('clearfix');

        const div = document.createElement('div');
        if (chat.Sender === '<%= usrid %>') {
            div.className = 'message my-message float-right';
        }
        else {
            div.className = 'message other-message';
        }
        div.innerHTML = chat.Message
        item.appendChild(div);
        messages.appendChild(item);

        const scroll = document.querySelector('.chat-history');
        scroll.scrollTop = scroll.scrollHeight;
    });

    // 채팅방의 채팅기록 불러오기
    socket.on('load_chatlog', (chats, sellerId, buyerId, bnum) => {
        console.log(sellerId)
        console.log(buyerId)
        console.log(bnum)
        // 헤더 생성
        const chat_header = document.getElementsByClassName('chat-header')[0];

        if (sellerId === '<%= usrid %>') {
            chat_header.innerHTML = `<img src="/images/profile/basic_profile.jpg" alt="avatar">
                        <div class="chat-about">
                            <h5 class="m-b-0">${buyerId}</h5>
                        </div>
                        <div class="float-right">
                            <button onclick="window.location.href='/sellBoard/sellRead/${bnum}'" class="btn btn-outline-secondary">게시글</button>
                        </div>`
        }
        else {
            chat_header.innerHTML = `<img src="/images/profile/basic_profile.jpg" alt="avatar">
                        <div class="chat-about">
                            <h5 class="m-b-0">${sellerId}</h5>
                        </div>
                        <div class="float-right">
                            <button onclick="window.location.href='/sellBoard/sellRead/${bnum}'" class="btn btn-outline-secondary">게시글</button>
                            <button id="purchase_btn" onclick="purchase()" class="btn btn-outline-secondary">구매</button>
                        </div>`
        }

        messages.innerHTML = "";
        const chatList = [];
        chats.forEach((chat) => {
            if (chat.Sender === '<%= usrid %>') {
                chatList.push(`<li class="clearfix">
                                <div class="message my-message float-right">${chat.Message}</div>
                            </li>`)
            }
            else {
                chatList.push(`<li class="clearfix">
                                <div class="message other-message float-left">${chat.Message}</div>
                            </li>`)
            }
        })
        messages.innerHTML = chatList.join('');
        const scroll = document.querySelector('.chat-history');
        scroll.scrollTop = scroll.scrollHeight;
    })

    // 채팅방 리스트 불러오기
    socket.on('load_chatrooms', (chatrooms) => {
        const div = document.getElementById('chat-list')
        const chatList = [];

        console.log(chatrooms)

        chatrooms.forEach(chatroom => {
            if (chatroom.Sid === '<%= usrid %>') {
                var id = chatroom.Rid;
            }
            else {
                var id = chatroom.Sid;
            }

            // 길이 제한에 따른 메시지 처리
            const lastMsg = chatroom.Lastmsg.length > 10
                ? chatroom.Lastmsg.slice(0, 10) + "..."
                : chatroom.Lastmsg;

            chatList.push(`<button onclick='load_chat_log(this)' id='${chatroom.Cno}' a_img='${chatroom.Image}' class="chat-select list-group-item list-group-item-action">
                <li class="clearfix">
                            <img src="${chatroom.Image}" alt="profileImage">
                            <div class="about">
                                <div class="name">${id}</div>
                                <div class="status"> ${lastMsg} </div>
                            </div>
                        </li>
            </button>`)
        });
        div.innerHTML = chatList.join('')

    })

    socket.on('tradeCompleted', () => {
        Swal.fire({
            title: '구매가 완료되었습니다.',
            icon: 'success',

            confirmButtonColor: '#3085d6', // confrim 버튼 색깔 지정
        }).then(result => {
            // 메인으로 돌아가기
            window.location.href = "/";
        });
    });

    socket.on('needmoney', () => {
        Swal.fire({
            title: '포인트가 부족합니다.',
            text: '충전 후 다시 시도해주세요.',
            icon: 'error',

            confirmButtonColor: '#3085d6', // confrim 버튼 색깔 지정
        });
    });

    socket.on('alreadyComplete', () => {
        Swal.fire({
            title: '이미 구매한 상품입니다.',
            icon: 'success',

            confirmButtonColor: '#3085d6', // confrim 버튼 색깔 지정
        });
    })
</script>

</html>